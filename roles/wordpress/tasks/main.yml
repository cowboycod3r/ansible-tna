---
# tasks for wordpress




- name: install nginx
  apt: name=nginx

- name: nginx configuration for wordpress
  template: src=default.conf.j2 dest=/etc/nginx/sites-available/default backup=yes
  notify:
    - reboot
    - waiting for come back

- name: nginx service
  service: name=nginx state=started enabled=yes
  tags:
    - systemcheck



- name: install php5-fpm
  apt: name=php5-fpm

- name: install php5-mysql
  apt: name=php5-mysql

- name: install php5-gd
  apt: name=php5-gd

- name: install php5-curl
  apt: name=php5-curl

- name: install php(5)-apc
  apt: name=php-apc

- name: disable default pool
  command: mv /etc/php5/fpm/pool.d/www.conf /etc/php5/fpm/pool.d/www.disabled creates=/etc/php5/fpm/pool.d/www.disabled
  notify:
    - reboot
    - waiting for come back

- name: copy php-fpm configuration
  template: src=wordpress.conf.j2 dest=/etc/php5/fpm/pool.d/wordpress.conf backup=yes
  notify:
    - reboot
    - waiting for come back

- name: php5-fpm service
  service: name=php5-fpm state=started enabled=yes
  tags:
    - systemcheck




- name: install mysql database
  apt: name=mysql-server
  register: mysql

- name: install MySQL-python (python-mysqldb)
  apt: name=python-mysqldb

- name: update mysql root passwords for other hosts using login password
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }} login_user=root login_password={{ mysql_root_password }}
  when: mysql|changed == false
  with_items:
    - "{{ ansible_hostname }}"
    - "{{ host_name }}"
    - 127.0.0.1
    - ::1
    - localhost

- name: update mysql root passwords for other hosts using no password
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
  when: mysql|changed == true
  with_items:
    - "{{ ansible_hostname }}"
    - "{{ host_name }}"
    - 127.0.0.1
    - ::1
    - localhost

- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent login_user=root login_password={{ mysql_root_password }}
  with_items:
    - localhost
    - "{{ ansible_hostname }}"
    - "{{ host_name }}"

- name: remove the test database
  mysql_db: name=test state=absent login_user=root login_password={{ mysql_root_password }}

- name: create mysql configuration file
  template: src=my.conf.j2 dest=/etc/my.cnf backup=yes
  notify:
    - reboot
    - waiting for come back

- name: mysql service
  service: name=mysql state=started enabled=yes
  tags:
    - systemcheck




- name: download wordpress
  get_url: url=http://wordpress.org/wordpress-{{ wp_version }}.tar.gz dest=/opt/wordpress-{{ wp_version }}.tar.gz
  register: download_wordpress

- name: update wordpress (delete wp-includes)
  command: chdir=/opt/wordpress rm -rf wp-includes
  when: download_wordpress|changed

- name: update wordpress (delete wp-admin)
  command: chdir=/opt/wordpress rm -rf wp-admin
  when: download_wordpress|changed

- name: extract archive
  command: chdir=/opt/ /bin/tar xvf wordpress-{{ wp_version }}.tar.gz
  when: download_wordpress|changed

- name: add group "wordpress"
  group: name=wordpress

- name: add user "wordpress"
  user: name=wordpress group=wordpress home=/opt/wordpress/

- name: create wordpress database
  mysql_db: name={{ wp_db_name }} state=present login_user=root login_password={{ mysql_root_password }}

- name: create wordpress database user
  mysql_user: name={{ wp_db_user }} password={{ wp_db_password }} priv={{ wp_db_name }}.*:ALL host='localhost' state=present  login_user=root login_password={{ mysql_root_password }}

- name: copy wordpress config file
  template: src=wp-config.php.j2 dest=/opt/wordpress/wp-config.php backup=yes

- name: change ownership of wordpress installation
  file: path=/opt/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes

- name: set upload max file size
  lineinfile: dest=/etc/php5/fpm/php.ini regexp=^upload_max_filesize line="upload_max_filesize = 64M"
  notify:
    - reboot

- name: set post max  size
  lineinfile: dest=/etc/php5/fpm/php.ini regexp=^post_max_size line="post_max_size = 64M"
  notify:
    - reboot

- name: set max execution time
  lineinfile: dest=/etc/php5/fpm/php.ini regexp=^max_execution_time line="max_execution_time = 360"
  notify:
    - reboot




- name: install avahi deamon
  apt: name=avahi-daemon

- name: avahi configuration
  template: src=http.service.j2 dest=/etc/avahi/services/http.service backup=yes
  notify:
    - reboot
    - waiting for come back

- name: avahi service
  service: name=avahi-daemon state=started enabled=yes
  tags:
    - systemcheck



